<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>

<rfc ipr="trust200902" docName="draft-irtf-oliver-pluggable-transports-00" category="info">

  <front>
    <title abbrev="Pluggable Transports">Enabling Network Traffic Obfuscation - Pluggable Transports</title>
    
    <author initials="D." surname="Oliver" fullname="David M. Oliver">
      <organization>Guardian Project</organization>
      <address>
        <email>david@guardianproject.info</email>
        <uri>https://guardianproject.info</uri>
      </address>
    </author>

    <author initials="B." surname="Wiley" fullname="Dr. Brandon Wiley">
        <organization>Operator Foundation</organization>
        <address>
            <email>brandon@operatorfoundation.org</email>
            <uri>https://operatorfoundation.org</uri>
        </address>
    </author>
    
    <date year="2019" month="June" day="26"/>

    <area>General</area>
    <workgroup>Network Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Pluggable Transports (PTs) are a mechanism enabling the rapid development and 
deployment of network traffic obfuscation techniques used to circumvent
surveillance and censorship. This specification does
not define or limit the techniques themselves, but rather focuses 
on the startup, shutdown, and inter-process communication mechanisms 
required to make these technologies interoperable with applications.</t>

<t>This document is based heavily on <xref target="PT2.1"/>.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The increased interest in network traffic obfuscation technologies mirrors the 
increase in usage of Deep Packet Inspection (DPI) to actively monitor the content
of application data in addition to that data’s routing information.  Deep Packet 
Inspection inspects each packet based on the header of its request and the 
data it carries. It can identify the type of protocol the connection is 
using even if it was encrypted. DPI is not a mechanism to decrypt what is 
inside packets but to identify the ‘protocol’ or the application it represents.</t>

<t>Deep packet inspection has become the prime tool of censors and surveillance entities who 
block, log, and/or traffic-shape access to sites and services they deem undesirable.<vspace />
As deep packet inspection has become more routine, the sophistication of monitoring 
has increased to include active probing that fingerprints and classifies application 
protocols.  Thus, even as conventional care in application design has improved
(via encryption and other protocol design features that encourage privacy), 
network traffic is still under attack.</t>

<t>The techniques of network monitoring are changing and improving
day by day.  The development of traffic obfuscation techniques that foil these 
efforts is slowed by the lack of common agreement on how these techniques are invoked, 
made easily interoperable with applications, and deployed quickly.  This 
specification addresses those issues.</t>

<t>This specification describes a method for decoupling protocol-level obfuscation from 
an application’s client/server code, in a manner that promotes rapid development 
of obfuscation/circumvention tools and promotes reuse across privacy tools such as
VPNs and secure proxies.</t>

<t>This decoupling is accomplished by utilizing helper code, either in-process through a language-specific API or in a separate sub-processes, that implements the
necessary forward/reverse proxy services that handle the censorship circumvention,
with a well defined and standardized configuration and management interface. Any 
application code that implements the interfaces as specified in this document 
will be able to use all specification-compliant Pluggable Transports.</t>

</section>
<section anchor="background" title="Background">

<t>We define an Internet censor as any network intermediary that seeks to block, divert or 
traffic-manage Internet network connections for the purpose of eliminating, frustrating
and/or logging access to Internet resources that have been deemed (by the censor) 
to be undesirable (either on a temporary or permanent basis).  A variety of 
techniques are commonly applied by Internet censors to block such traffic.  These include:</t>

<t><list style="numbers">
  <t>DNS Blocking</t>
  <t>IP Blocking</t>
  <t>Port Blocking</t>
</list></t>

<t>These techniques are applicable to a connection’s metadata (IP routing information)
and do not require inspecting the connection’s datastream.</t>

<t>DPI, in contrast, actually looks at the connection’s datastream - often, specifically, 
the initial data elements in the stream (or within blocks of the stream).  These 
elements of the stream can contain clues 
as to the application-level protocol employed, even when the data itself is 
encrypted.  Through observation over time, these clues (“fingerprints”) can be learned by
the censor and (along with the routing information) used to block or divert 
targeted traffic.</t>

<t>A defense against this type of active probing is traffic obfuscation - disguising
the application data itself in a manner that is less-easily fingerprinted.  However, in
early experiments it quickly became clear that repeated use of the same
obfuscation technique would, itself, be learned. Methods were developed 
by which a single obfuscation technique could transform on its own TODO: cite FTE 
proxy, ScrambleSuit, Dust.  This approach proved expensive in terms of
computational load.  Interest gathered in solving this problem and as more ideas
arose so to did the need for a mechanism supporting rapid deploying of new 
obfuscation techniques.</t>

<t>While intense work on network traffic obfuscation commenced initially and continues within
the Tor Project (and across a wider set of external parties using Tor as a vehicle 
for research), vendors of other privacy-enhancing software (such as VPNs) quickly found 
their products also foiled by DPI.  Thus, it becomes important to see
transport plugability as a mechanism implemented in a manner independent of a
specific product or service.  The notion of “Pluggable Transports” (PT) was born from
these requirements.</t>

</section>
<section anchor="architecture-overview" title="Architecture Overview">

<t>The PT Server software exposes a public proxy that accepts connections from PT Clients. 
The PT Client transforms the traffic before it hits the public Internet and the PT 
Server reverses this transformation before passing the traffic on to its next destination. 
The PT Server directly forwards this data to the Server App, but the
Server App itself may itself be a proxy server and expect the forwarded traffic it 
receives to conform to a proxy communication protocol such as SOCKS or TURN. There is 
also an optional lightweight protocol to facilitate communicating connection metadata 
that would otherwise be lost such as the source IP address and port EXTORPORT.</t>

<t>When using an in-process, language-specific API (“Transport API Interface”) to integrate PTs into an application on both client and server, the PT Client
Library is integrated directly into the Client App and the PT Server Library is integrated 
directly into the Server App. The Client App and Server App communicate through 
socket-like APIs, with all communication between them going through the PT library, 
which only sends transformed traffic over the public Internet.</t>

<figure><artwork><![CDATA[
  +------------+                     +---------------------------+
  | Client App +-- Socket-like API --+ PT Client (Library)       +--+ 
  +------------+                     +---------------------------+  |
                                                                    | 
               Public Internet (Obfuscated/Transformed traffic) ==> | 
                                                                    | 
  +------------+                       +-------------------------+  | 
  | Server App +--  Socket-like API  --+ PT Server (Library)     +--+
  +------------+                       +-------------------------+
  
           Figure 1. API Architecture Overview
]]></artwork></figure>

<t>When using the transports as a separate process on both client and server, 
the Dispatcher IPC Interface is used. On the client device, the PT Client 
software exposes a local proxy to the client application, and transforms traffic 
before forwarding it to the PT Server. The PT Dispatcher can be configured to 
provide different proxy types, supporting proxying of both TCP and UDP traffic.</t>

<figure><artwork><![CDATA[
  +------------+                     +---------------------------+
  | Client App +---- Local Proxy ----+ PT Client (Dispatcher)    +--+ 
  +------------+                     +---+-------------------+---+  |
                                       | PT Client Library |        |
                                       +-------------------+        |
                                                                    |
             Public Internet (Transformed/Proxied traffic) =====>   |
                                                                    |
  +------------+                     +---------------------------+  |
  | Server App +---- Local Proxy ----+ PT Server (Dispatcher )   +--+
  +------------+                     +---+-------------------+---+ 
                                         |PT Server (Library)| 
                                         +-------------------+

        Figure 2. IPC Architecture Overview
]]></artwork></figure>

<t>A PT client-server setup may also mix and match interfaces, using Dispatcher IPC on one end of the connection and
the Transport API on the other, as below (or vice-versa):</t>

<figure><artwork><![CDATA[
  +------------+                     +---------------------------+
  | Client App +---- Local Proxy ----+ PT Dispatcher Client      +-+ 
  +------------+                     +---+-------------------+---+ |
                                                                   |
                                                                   |
  +------------+                     +--------------------------+  | 
  | Server App +-- Socket-like API --+ PT Server (Library )     +--+ 
  +------------+                     +--------------------------+

        Figure 3. Mixed IPC and Transport API example
]]></artwork></figure>

<t>Each invocation of a PT MUST be either a client OR a server.</t>

<t>PT dispatchers MAY support any of the following proxy modes: PT 1.0 with SOCKS4, 
    PT 1.0 with SOCKS5, or any of the PT 2.1 modes: transparent TCP, transparent UDP, or STUN-aware UDP.
Clients SHOULD prefer PT 2.1 over PT 1.0.</t>

</section>
<section anchor="specification" title="Specification">

<section anchor="pluggable-transport-naming" title="Pluggable Transport Naming">

<t>Pluggable Transport names serve as unique identifiers, and every PT MUST have a unique name.
PT names MUST be valid C identifiers, which means that PT names MUST begin with a letter or underscore, and the remaining characters MUST be ASCII letters, numbers or underscores. No length limit is imposed.
PT names MUST therefore satisfy the regular expression [a-zA-Z_][a-zA-Z0-9_]*.</t>

</section>
<section anchor="transports-api-interface" title="Transports API Interface">

<section anchor="goals-for-interface-design" title="Goals for interface design">

<t>The goal for the interface design is to achieve the following properties:</t>

<t><list style="symbols">
  <t>Transport implementers have to do the minimum amount of work in addition to
implementing the core transform logic.</t>
  <t>Transport users have to do the minimum amount of work to add PT support to code that
uses standard networking primitives from the language or platform.</t>
  <t>Transports require an explicit destination address to be specified. However, this can be
either an explicit PT server destination with the Server App is already known 
implicitly, or an explicit Server App destination with the PT server
destination already known implicity.</t>
  <t>Transports may or may not generate, send, receive, store, and/or update persistent or 
ephemeral state.</t>
  <t>Transports that do not need persistence or negotiation can interact with the application 
through the simplest possible interface</t>
  <t>Transports that do need persistence or negotiation can rely on the application to 
provide it through the specified interface, so the transport does not need to 
implement persistence or negotiation internally.</t>
  <t>Applications should be able to use a PT Client implementation to establish several 
independent transport connections with different parameters, with a minimum of 
complexity and latency.</t>
  <t>The interface in each language should be idiomatic and performant, including 
reproducing blocking behavior and interaction with nonblocking IO subsystems when possible.</t>
</list></t>

</section>
<section anchor="abstract-interfaces" title="Abstract Interfaces">
<t>This section presents high-level pseudocode descriptions of the interfaces exposed 
by different types of transport components. Implementations for different languages 
should provide equivalent functionality, but should use the idioms for each language, 
mimicking the existing networking libraries.</t>

<section anchor="transport" title="Transport">
<t><list style="symbols">
  <t>Transport​ takes a ​transport configuration​ and provides a ​Client Factory​ and a 
Server Factory.</t>
  <t>Transports​ may provide additional language-specific configuration methods.</t>
  <t>The only way to obtain ​Client Factories​ and ​Server Factories​ is from the
Transport​.</t>
  <t>The ​Server Factory​ of the ​Transport​ can fail if the Transport does not provide a
server-side implementation. However,
most transports provide both a client and server implementation.</t>
  <t>The ​transport configuration​ is specific to each T​ransport​. Using a ​Transport
requires knowing the correct parameters to initialize that ​Transport.</t>
</list></t>

<section anchor="client-factory" title="Client Factory">
<t><list style="symbols">
  <t>Client Factory​ takes the ​connection settings​ and produces a ​Connection​ to that server.</t>
  <t>The ​connection settings​ are specific to each transport. Some transports will also require an argument indicating the ​destination endpoint​. Producing a Connection​ may fail if the server is unreachable or if the ​transport configuration​ was incorrect.</t>
</list></t>

</section>
<section anchor="server-factory" title="Server Factory">
<t><list style="symbols">
  <t>Server Factory​ takes the address on which the PT server should listen for incoming client connections and produces a ​Listener​ for that address</t>
</list></t>

</section>
<section anchor="listener" title="Listener">
<t><list style="symbols">
  <t>Listener​ produces a stream of ​Connections</t>
  <t>New ​Connections​ are available whenever an incoming network connection from the PT
client has been established. The language-specific API can adopt either a blocking or non-blocking API for accepting new connections, depending on what is idiomatic for the language.
3.2.2.2. Connection</t>
  <t>Connection​ provides an API similar to the environment’s native socket type</t>
  <t>Connection​ is what is used to read and write data over the transport connection</t>
  <t>The transport-specific logic for obfuscating network traffic is implemented inside
the ​Connection.</t>
</list></t>

</section>
</section>
</section>
</section>
</section>
<section anchor="adapters" title="Adapters">
<t>This section covers the various different ways that the Pluggable Transport interfaces (both API and IPC) can be adapted to different use cases.</t>

<section anchor="api-to-ipc-adapter" title="API to IPC Adapter">
<t>When an application and the transports it uses are written in the same language, 
either the Transports API or Dispatcher IPC can be used. When they are in different 
languages, they must communicate through the Dispatcher IPC interface. For maximum 
flexibility and to minimize duplication of effort across languages, dispatcher can 
be implemented by wrapping transport implementations that implement the Transports 
API. For an example of this approach, see the Shapeshifter Dispatcher 
[​https://github.com/OperatorFoundation/shapeshifter-dispatcher]​ , which wraps 
transports implementing the Transports API in the Go language and provides a 
Dispatcher IPC interface to use them from other languages.</t>

</section>
<section anchor="pt-10-compatibility" title="PT 1.0 Compatibility">
<t>The only interface defined in the PT 1.0 specification is an IPC interface. No 
standard API is defined. Therefore, PT 1.0 compatibility refers to compatibility 
between applications and transports where one side conforms to the PT 1.0 specification 
and the other conforms to the PT 2.1 specification. Fortunately, an adapter is not
needed in this case as both the PT 1.0 and PT 2.1 specifications allow for version
negotiation. The TOR_PT_MANAGED_TRANSPORT_VER environment variable or -ptversion 
command line flag is used by the application to specify a list of supported versions, 
for instance “1.0,2.1”. The PT provider responds with the VERSION command on stdout in
order to specify which version is supported by the PT provider, for instance 
“VERSION 2.1”. Since the application can specify a list of supported versions, the
PT provider can respond dynamically, supporting PT 1.0 when required and automatically 
upgrading to a PT 2.1 implementation when that is an available option. It is up to
applications whether they want to support PT 2.1 exclusively or maintain backwards
compatibility with PT 1.0 implementations.</t>

</section>
<section anchor="cross-language-linking" title="Cross-language Linking">
<t>If two languages are compatible via cross-language linking, then a suitable adapter 
can be written that wraps the implementation of the Transports API in one language 
with an API for a compatible language. For example, on Android the Go implementation 
of the Transports API is wrapped in a Java API to create Java language bindings without 
the need for a native Java implementation or use of Dispatcher IPC.</t>

<section anchor="using-the-dispatcher-ipc-interface-in-process" title="Using the Dispatcher IPC Interface In-process">
<t>When using a transport that exposes the Dispatcher IPC interface, it may be more 
convenient to run the transport in a separate thread but in the same process as 
the application. Packets can still be routed through the transport’s SOCKS5 or
TURN port on localhost. However, it may be inconvenient or impossible to use STDIN 
and STDOUT for communication between these two threads. Therefore, in some languages 
it may be appropriate to produce an “inter-thread interface” that reproduces the 
Dispatcher IPC interface’s semantics, but replaces STDIN and STDOUT with language-native 
function-call and event primitives. This is the approach used by OnionBrowser 
[​https://mike.tig.as/onionbrowser/​], the Tor implementation on iOS. This approach 
is used because Tor uses the Dispatcher IPC mechanism to talk to the transports instead 
of the Transports API. However, iOS does not allow for applications to have multiple 
processes. Therefore, an in-process Dispatcher IPC approach must be used instead of 
traditional separate process Dispatcher IPC. An alternative would be to use the 
Transports API directly instead of Dispatcher IPC.</t>

</section>
</section>
<section anchor="anonymity-considerations" title="Anonymity Considerations">

<t>When designing and implementing a Pluggable Transport, care should be taken to preserve 
the privacy of clients and to avoid leaking personally identifying information.
Examples of client related considerations are:
- Not logging client IP addresses to disk.
- Not leaking DNS addresses except when necessary.
- Ensuring that “TOR_PT_PROXY”’s “fail closed” behavior is implemented correctly.</t>

<t>Additionally, certain obfuscation mechanisms rely on information such as the server IP 
address and port being confidential, so clients also need to take care to preserve 
server side information confidential when applicable.</t>

</section>
</section>
<section anchor="references" title="References">

<t>[RFC2119] Bradner, S., “Key words for use in RFCs to Indicate Requirement Levels”, BCP 14, RFC 2119, March 1997.</t>

<t>[RFC1928] Leech, M., Ganis, M., Lee, Y., Kuris, R., Koblas, D., Jones, L., “SOCKS Protocol Version 5”, RFC 1928, March 1996.</t>

<t>[EXTORPORT] Kadianakis, G., Mathewson, N., “Extended ORPort and TransportControlPort”, Tor Proposal 196, March 2012.</t>

<t>[RFC3986] Berners-Lee, T., Fielding, R., Masinter, L., “Uniform Resource Identifier (URI): Generic Syntax”, RFC 3986, January 2005.</t>

<t>[RFC1929] Leech, M., “Username/Password Authentication for SOCKS V5”, RFC 1929, March 1996.</t>

<t>[PT2-DISPATCHER] Wiley, Brandon., Shapeshifter Dispatcher. https://github.com/OperatorFoundation/shapeshifter-dispatcher</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">
<t>Many people contributed to the PT 2.1 specification. Major contributions were made by
Dr. Brandon Wiley (Operator Foundation), Nick Mathewson (Tor), and Ben Schwartz (Jigsaw). 
Valuable feedback was provided by the attendees at the Pluggable Transport Implementers 
Meetings and the traffic-obf and tor-dev mailing lists. The PT 2.1 specification expands
upon the “Pluggable Transport Specification (Version 1)” document authored by Yawning 
Angel (Tor). Inspiration for the PT 2.1 Go API was also inspired by the obfs4proxy
implementation of the PT 1.0 specification in Go, also developed by Yawning Angel (Tor).</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

<reference anchor="PT2.1" target="https://github.com/Pluggable-Transports/Pluggable-Transports-spec/blob/master/releases/PTSpecV2.1Draft1/Pluggable%20Transport%20Specification%20v2.1%20-%20Base%20Specification%20v2.1%2C%20Draft%201.pdf">
  <front>
    <title>Pluggable Transport Base Specification</title>
    <author >
      <organization></organization>
    </author>
    <date year="2018"/>
  </front>
</reference>


    </references>




  </back>

<!-- ##markdown-source:
H4sIAPM4FF0AA8VcbXMbx5H+Pr9iiqqrkBEASXSci1iVq6OolzC2RBYJ2fEl
KtdgdwBsuNhFdnYJwXGq/D1/4FKV/Dn9knu6e2Z2FgRlO3Hq5LKEl9mZnn59
uqcH4/FYtUVb2hP9ojKzsqgW+o1tN3Vzo6eNmc+LTF/M5p3LTFvUlR7ry7Jb
LDDS0veVW9dN65SZzRp7e7L/y7zOKrPCCjkmbMdF087HdVnc2ma8DuPHbRw/
fvxYYTW7qJvtiS6qea1UsW5OdNt0rj1+/Pjp42NlGmtO9Ctb2caUishdNHW3
PonEf4m/aDOv6GN1Y7f4ND/R51Vrm8q24+dEi1KuNVX+tSnrCvRtrVPr4kQr
rZt5ZnPXbkv/sdZtnSUviyq3VRs+cKC7sXMX329Xg7dtU2RxcFavVng2fltU
4Hq/jH3fjsvCtWNMMqtLDBvXP3+olOnaZd2cKD3GKHoK3xw8n+gL5uQBfyhs
Pnhubotcvx5+VzcLUxXfsBgx5lVnmrwwlb5s6j/arJVBdmWKEoKiCf574Yes
ZcSERUGjugZMWrbt2p08erR3lKrqZoWlbi0I1pfT48mTE34UGxRtO9ijKvqZ
cVZfr21WQO+Y0gP/VA6FONHHj5/8KkxjmoVtEzKKdtnNJmDuozjzuFfCvR+O
HZZ6NCvr2aOVcVCMR40tLWjA8CmR8QXoZkV50j//H8eP4wx4PaAW72/xCP4Z
43/azb0jzvCKp8a/TybrfA4lB+ci19R4PNZmBtUxGfR0n2Hpw8upO9IwBW30
ymZLyNettA123C6tbswaqpDbW1vWa1I7DX3XKrfrst7y+3quK28zrTf4OjH4
FvNWxZ8663TnbA7d11nRZN3qFg8r1zW3tihLU2WWZ85sBWNwy2I90dNl4bRL
d6/zGkpe1S0omkPpoZS6LFZFy7QmS+Htytny1rqRnnUttoFPGj2vMxDhtCLC
8ASst2m79Ui7Zdfm9aYaMREFGfkYCplZ59jeuipQEPmEWRr7p65oZFMrc2Np
TufpqMt6UWApnqtew80Q8zfQMm3W69JP5yZK8Tbh4zpmJ17PDDFqaWFE5VZj
zT//mS3gL3+ZiFhXRZ6XVqkH5I6aOu8ymotmslgvayxPwCtbhymr75dQIHdV
NA34z9xRYS6aoXNmYfVza9f60mQ3tsXaJBue4vD55fkRcQG6Bu0D1au6KlpI
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

-->

</rfc>

