<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>

<rfc ipr="trust200902" docName="draft-irtf-oliver-pluggable-transports-00" category="info">

  <front>
    <title abbrev="Pluggable Transports">Enabling Network Traffic Obfuscation - Pluggable Transports</title>

    <author initials="B." surname="Wiley" fullname="Brandon Wiley">
      <organization>Operator Foundation</organization>
      <address>
        <email>brandon@operatorfoundation.org</email>
        <uri>https://operatorfoundation.org</uri>
      </address>
    </author>
    <author initials="D." surname="Oliver" fullname="David M. Oliver">
      <organization>Guardian Project</organization>
      <address>
        <email>david@guardianproject.info</email>
        <uri>https://guardianproject.info</uri>
      </address>
    </author>

    <date year="2019" month="July" day="08"/>

    <area>General</area>
    <workgroup>Network Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>Pluggable Transports (PTs) are a mechanism enabling the rapid development and 
deployment of network traffic obfuscation techniques used to circumvent
surveillance and censorship. This specification does
not define or limit the techniques themselves, but rather focuses 
on the startup, shutdown, and inter-process communication mechanisms 
required to make these technologies interoperable with applications.</t>

<t>This document is based heavily on <xref target="PT2.1"/>.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The increased interest in network traffic obfuscation technologies mirrors the 
increase in usage of Deep Packet Inspection (DPI) to actively monitor the content 
of application data in addition to that data’s routing information.  Deep Packet 
Inspection inspects each packet based on the header of its request and the 
data it carries. It can identify the type of protocol the connection is 
using even if it was encrypted. DPI is not a mechanism to decrypt what is 
inside packets but to identify the ‘protocol’ or the application it represents.</t>

<t>Deep packet inspection has become the prime tool of censors and surveillance entities who 
block, log, and/or traffic-shape access to sites and services they deem undesirable.<vspace />
As deep packet inspection has become more routine, the sophistication of monitoring 
has increased to include active probing that fingerprints and classifies application 
protocols.  Thus, even as conventional care in application design has improved
(via encryption and other protocol design features that encourage privacy), 
network traffic is still under attack.</t>

<t>The techniques of network monitoring are changing and improving
day by day.  The development of traffic obfuscation techniques that foil these 
efforts is slowed by the lack of common agreement on how these techniques are invoked, 
made easily interoperable with applications, and deployed quickly.  This 
specification addresses those issues.</t>

<t>This specification describes a method for decoupling protocol-level obfuscation from 
an application’s client/server code, in a manner that promotes rapid development 
of obfuscation/circumvention tools and promotes reuse across privacy tools such as
VPNs and secure proxies.</t>

<t>This decoupling is accomplished by utilizing helper code, either in-process through a language-specific API or in a separate sub-processes, that implements the
necessary forward/reverse proxy services that handle the censorship circumvention,
with a well defined and standardized configuration and management interface. Any 
application code that implements the interfaces as specified in this document 
will be able to use all specification-compliant Pluggable Transports.</t>

</section>
<section anchor="conventions-and-definitions" title="Conventions and Definitions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>

</section>
<section anchor="background" title="Background">

<t>We define an Internet censor as any network intermediary that seeks to block, divert or 
traffic-manage Internet network connections for the purpose of eliminating, frustrating
and/or logging access to Internet resources that have been deemed (by the censor) 
to be undesirable (either on a temporary or permanent basis).  A variety of 
techniques are commonly applied by Internet censors to block such traffic.  These include:</t>

<t><list style="numbers">
  <t>DNS Blocking</t>
  <t>IP Blocking</t>
  <t>Port Blocking</t>
</list></t>

<t>These techniques are applicable to a connection’s metadata (IP routing information)
and do not require inspecting the connection’s datastream.</t>

<t>DPI, in contrast, actually looks at the connection’s datastream - often, specifically, 
the initial data elements in the stream (or within blocks of the stream).  These 
elements of the stream can contain clues 
as to the application-level protocol employed, even when the data itself is 
encrypted.  Through observation over time, these clues (“fingerprints”) can be learned by
the censor and (along with the routing information) used to block or divert 
targeted traffic.</t>

<t>A defense against this type of active probing is traffic obfuscation - disguising
the application data itself in a manner that is less-easily fingerprinted.  However, in
early experiments it quickly became clear that repeated use of the same 
obfuscation technique would, itself, be learned. Methods were developed 
by which a single obfuscation technique could transform on its own TODO: cite FTE 
proxy, ScrambleSuit, Dust. This approach proved expensive in terms of 
computational load.  Interest gathered in solving this problem and as more ideas
arose so to did the need for a mechanism supporting rapid deploying of new 
obfuscation techniques.</t>

<t>While intense work on network traffic obfuscation commenced initially and continues within
the Tor Project (and across a wider set of external parties using Tor as a vehicle 
for research), vendors of other privacy-enhancing software (such as VPNs) quickly found 
their products also foiled by DPI.  Thus, it becomes important to see
transport pluggability as a mechanism implemented in a manner independent of a 
specific product or service.  The notion of “Pluggable Transports” (PT) was born from
these requirements.</t>

</section>
<section anchor="architecture-overview" title="Architecture Overview">

<t>The PT Server software exposes a public proxy that accepts connections from PT Clients. 
The PT Client transforms the traffic before it hits the public Internet and the PT 
Server reverses this transformation before passing the traffic on to its next destination. 
The PT Server directly forwards this data to the Server App, but the 
Server App itself may itself be a proxy server and expect the forwarded traffic it 
receives to conform to a proxy communication protocol such as SOCKS or TURN. There is 
also an optional lightweight protocol to facilitate communicating connection metadata 
that would otherwise be lost such as the source IP address and port EXTORPORT.</t>

<t>When using an in-process, language-specific API (“Transport API Interface”) to integrate PTs into an application on both client and server, the PT Client 
Library is integrated directly into the Client App and the PT Server Library is integrated 
directly into the Server App. The Client App and Server App communicate through 
socket-like APIs, with all communication between them going through the PT library, 
which only sends transformed traffic over the public Internet.</t>

<figure><artwork><![CDATA[
  +------------+                     +---------------------------+
  | Client App +-- Socket-like API --+ PT Client (Library)       +--+ 
  +------------+                     +---------------------------+  |
                                                                    | 
               Public Internet (Obfuscated/Transformed traffic) ==> | 
                                                                    | 
  +------------+                       +-------------------------+  | 
  | Server App +--  Socket-like API  --+ PT Server (Library)     +--+
  +------------+                       +-------------------------+
  
           Figure 1. API Architecture Overview
]]></artwork></figure>

<t>When using the transports as a separate process on both client and server, 
the Dispatcher IPC Interface is used. On the client device, the PT Client 
software exposes a local proxy to the client application, and transforms traffic 
before forwarding it to the PT Server. The PT Dispatcher can be configured to 
provide different proxy types, supporting proxying of both TCP and UDP traffic.</t>

<figure><artwork><![CDATA[
  +------------+                     +---------------------------+
  | Client App +---- Local Proxy ----+ PT Client (Dispatcher)    +--+ 
  +------------+                     +---+-------------------+---+  |
                                       | PT Client Library |        |
                                       +-------------------+        |
                                                                    |
             Public Internet (Transformed/Proxied traffic) =====>   |
                                                                    |
  +------------+                     +---------------------------+  |
  | Server App +---- Local Proxy ----+ PT Server (Dispatcher )   +--+
  +------------+                     +---+-------------------+---+ 
                                         |PT Server (Library)| 
                                         +-------------------+

        Figure 2. IPC Architecture Overview
]]></artwork></figure>

<t>A PT client-server setup may also mix and match interfaces, using Dispatcher IPC on one end of the connection and
the Transport API on the other, as below (or vice-versa):</t>

<figure><artwork><![CDATA[
  +------------+                     +---------------------------+
  | Client App +---- Local Proxy ----+ PT Dispatcher Client      +-+ 
  +------------+                     +---+-------------------+---+ |
                                                                   |
                                                                   |
  +------------+                     +--------------------------+  | 
  | Server App +-- Socket-like API --+ PT Server (Library )     +--+ 
  +------------+                     +--------------------------+

        Figure 3. Mixed IPC and Transport API example
]]></artwork></figure>

<t>Each invocation of a PT MUST be either a client OR a server.</t>

<t>PT dispatchers MAY support any of the following proxy modes: PT 1.0 with SOCKS4, PT 1.0 with SOCKS5, or any of the PT 2.1 modes: transparent TCP, transparent UDP, or STUN-aware UDP.
Clients SHOULD prefer PT 2.1 over PT 1.0.</t>

</section>
<section anchor="specification" title="Specification">

<section anchor="pluggable-transport-naming" title="Pluggable Transport Naming">

<t>Pluggable Transport names serve as unique identifiers, and every PT MUST have a unique name.
PT names MUST be valid C identifiers, which means that PT names MUST begin with a letter or underscore, and the remaining characters MUST be ASCII letters, numbers or underscores. No length limit is imposed.
PT names MUST therefore satisfy the regular expression [a-zA-Z_][a-zA-Z0-9_]*.</t>

</section>
<section anchor="transports-api-interface" title="Transports API Interface">

<section anchor="goals-for-interface-design" title="Goals for interface design">

<t>The goal for the interface design is to achieve the following properties:</t>

<t><list style="symbols">
  <t>Transport implementers have to do the minimum amount of work in addition to
implementing the core transform logic.</t>
  <t>Transport users have to do the minimum amount of work to add PT support to code that
uses standard networking primitives from the language or platform.</t>
  <t>Transports require an explicit destination address to be specified. However, this can be
either an explicit PT server destination with the Server App is already known 
implicitly, or an explicit Server App destination with the PT server
destination already known implicity.</t>
  <t>Transports may or may not generate, send, receive, store, and/or update persistent or 
ephemeral state.</t>
  <t>Transports that do not need persistence or negotiation can interact with the application 
through the simplest possible interface</t>
  <t>Transports that do need persistence or negotiation can rely on the application to 
provide it through the specified interface, so the transport does not need to 
implement persistence or negotiation internally.</t>
  <t>Applications should be able to use a PT Client implementation to establish several 
independent transport connections with different parameters, with a minimum of 
complexity and latency.</t>
  <t>The interface in each language should be idiomatic and performant, including 
reproducing blocking behavior and interaction with nonblocking IO subsystems when possible.</t>
</list></t>

</section>
<section anchor="abstract-interfaces" title="Abstract Interfaces">
<t>This section presents high-level pseudocode descriptions of the interfaces exposed 
by different types of transport components. Implementations for different languages 
should provide equivalent functionality, but should use the idioms for each language, 
mimicking the existing networking libraries.</t>

<section anchor="transport" title="Transport">
<t><list style="symbols">
  <t>Transport​ takes a ​transport configuration​ and provides a ​Client Factory​ and a 
Server Factory.</t>
  <t>Transports​ may provide additional language-specific configuration methods.</t>
  <t>The only way to obtain ​Client Factories​ and ​Server Factories​ is from the
Transport​.</t>
  <t>The ​Server Factory​ of the ​Transport​ can fail if the Transport does not provide a
server-side implementation. However,
most transports provide both a client and server implementation.</t>
  <t>The ​transport configuration​ is specific to each T​ransport​. Using a ​Transport
requires knowing the correct parameters to initialize that ​Transport.</t>
</list></t>

<section anchor="client-factory" title="Client Factory">
<t><list style="symbols">
  <t>Client Factory​ takes the ​connection settings​ and produces a ​Connection​ to that server.</t>
  <t>The ​connection settings​ are specific to each transport. Some transports will also require an argument indicating the ​destination endpoint​. Producing a Connection​ may fail if the server is unreachable or if the ​transport configuration​ was incorrect.</t>
</list></t>

</section>
<section anchor="server-factory" title="Server Factory">
<t><list style="symbols">
  <t>Server Factory​ takes the address on which the PT server should listen for incoming client connections and produces a ​Listener​ for that address</t>
</list></t>

</section>
<section anchor="listener" title="Listener">
<t><list style="symbols">
  <t>Listener​ produces a stream of ​Connections</t>
  <t>New ​Connections​ are available whenever an incoming network connection from the PT
client has been established. The language-specific API can adopt either a blocking or non-blocking API for accepting new connections, depending on what is idiomatic for the language.
3.2.2.2. Connection</t>
  <t>Connection​ provides an API similar to the environment’s native socket type</t>
  <t>Connection​ is what is used to read and write data over the transport connection</t>
  <t>The transport-specific logic for obfuscating network traffic is implemented inside
the ​Connection.</t>
</list></t>

</section>
</section>
</section>
</section>
</section>
<section anchor="adapters" title="Adapters">
<t>This section covers the various different ways that the Pluggable Transport interfaces (both API and IPC) can be adapted to different use cases.</t>

<section anchor="api-to-ipc-adapter" title="API to IPC Adapter">
<t>When an application and the transports it uses are written in the same language, either the Transports API or Dispatcher IPC can be used. When they are in different languages, they must communicate through the Dispatcher IPC interface. For maximum flexibility and to minimize duplication of effort across languages, dispatcher can be implemented by wrapping transport implementations that implement the Transports API. For an example of this approach, see the Shapeshifter Dispatcher <xref target="PT2-DISPATCHER"/>, which wraps 
transports implementing the Transports API in the Go language and provides a 
Dispatcher IPC interface to use them from other languages.</t>

</section>
<section anchor="pt-10-compatibility" title="PT 1.0 Compatibility">
<t>The only interface defined in the PT 1.0 specification is an IPC interface. No 
standard API is defined. Therefore, PT 1.0 compatibility refers to compatibility 
between applications and transports where one side conforms to the PT 1.0 specification 
and the other conforms to the PT 2.1 specification. Fortunately, an adapter is not 
needed in this case as both the PT 1.0 and PT 2.1 specifications allow for version 
negotiation. The TOR_PT_MANAGED_TRANSPORT_VER environment variable or -ptversion 
command line flag is used by the application to specify a list of supported versions, 
for instance “1.0,2.1”. The PT provider responds with the VERSION command on stdout in 
order to specify which version is supported by the PT provider, for instance 
“VERSION 2.1”. Since the application can specify a list of supported versions, the 
PT provider can respond dynamically, supporting PT 1.0 when required and automatically 
upgrading to a PT 2.1 implementation when that is an available option. It is up to 
applications whether they want to support PT 2.1 exclusively or maintain backwards 
compatibility with PT 1.0 implementations.</t>

</section>
<section anchor="cross-language-linking" title="Cross-language Linking">
<t>If two languages are compatible via cross-language linking, then a suitable adapter 
can be written that wraps the implementation of the Transports API in one language 
with an API for a compatible language. For example, on Android the Go implementation 
of the Transports API is wrapped in a Java API to create Java language bindings without 
the need for a native Java implementation or use of Dispatcher IPC.</t>

<section anchor="using-the-dispatcher-ipc-interface-in-process" title="Using the Dispatcher IPC Interface In-process">
<t>When using a transport that exposes the Dispatcher IPC interface, it may be more 
convenient to run the transport in a separate thread but in the same process as 
the application. Packets can still be routed through the transport’s SOCKS5 or
TURN port on localhost. However, it may be inconvenient or impossible to use STDIN 
and STDOUT for communication between these two threads. Therefore, in some languages 
it may be appropriate to produce an “inter-thread interface” that reproduces the 
Dispatcher IPC interface’s semantics, but replaces STDIN and STDOUT with language-native 
function-call and event primitives. This is the approach used by OnionBrowser <xref target="ONION_BROWSER"/>, the Tor implementation on iOS. This approach 
is used because Tor uses the Dispatcher IPC mechanism to talk to the transports instead 
of the Transports API. However, iOS does not allow for applications to have multiple 
processes. Therefore, an in-process Dispatcher IPC approach must be used instead of 
traditional separate process Dispatcher IPC. An alternative would be to use the 
Transports API directly instead of Dispatcher IPC.</t>

</section>
</section>
<section anchor="anonymity-considerations" title="Anonymity Considerations">

<t>When designing and implementing a Pluggable Transport, care should be taken to preserve 
the privacy of clients and to avoid leaking personally identifying information.
Examples of client related considerations are:</t>

<t><list style="symbols">
  <t>Not logging client IP addresses to disk.</t>
  <t>Not leaking DNS addresses except when necessary.</t>
  <t>Ensuring that “TOR_PT_PROXY”’s “fail closed” behavior is implemented correctly.</t>
</list></t>

<t>Additionally, certain obfuscation mechanisms rely on information such as the server IP 
address and port being confidential, so clients also need to take care to preserve 
server side information confidential when applicable.</t>

</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>

<reference anchor="ONION_BROWSER" target="https://github.com/OnionBrowser/OnionBrowser">
  <front>
    <title>Onion Browser</title>
    <author >
      <organization></organization>
    </author>
    <date year="2019"/>
  </front>
</reference>
<reference anchor="PT2-DISPATCHER" target="https://github.com/OperatorFoundation/shapeshifter-dispatcher">
  <front>
    <title>Shapeshifter Dispatcher</title>
    <author initials="B." surname="Wiley" fullname="Brandon Wiley">
      <organization></organization>
    </author>
    <date year="2018"/>
  </front>
</reference>
<reference anchor="PT2.1" target="https://github.com/Pluggable-Transports/Pluggable-Transports-spec/blob/master/releases/PTSpecV2.1Draft1/Pluggable%20Transport%20Specification%20v2.1%20-%20Base%20Specification%20v2.1%2C%20Draft%201.pdf">
  <front>
    <title>Pluggable Transport Base Specification</title>
    <author initials="B." surname="Wiley" fullname="Brandon Wiley">
      <organization></organization>
    </author>
    <date year="2018"/>
  </front>
</reference>


    </references>


<section numbered="false" anchor="acknowledgments" title="Acknowledgments">

<t>Many people contributed to the PT 2.1 specification. Major contributions were made by 
Dr. Brandon Wiley (Operator Foundation), Nick Mathewson (Tor), and Ben Schwartz (Jigsaw). 
Valuable feedback was provided by the attendees at the Pluggable Transport Implementers 
Meetings and the traffic-obf and tor-dev mailing lists. The PT 2.1 specification expands 
upon the “Pluggable Transport Specification (Version 1)” document authored by Yawning 
Angel (Tor). Inspiration for the PT 2.1 Go API was also inspired by the obfs4proxy 
implementation of the PT 1.0 specification in Go, also developed by Yawning Angel (Tor).</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAJBWI10AA8VcbXMjt5H+jl+B09ZVpCzJfbFTF6vKV9FKa1u5XUknce34
Lldb4AxITjScYQYz4tL2Vvn7/YFL1d2f8y+5p7sBDIai1nbiVDYViy+YRqPR
/fQLGhyPx6ot2tIe65eVmZVFtdAXtt3Uza2eNmY+LzJ9OZt3LjNtUVd6rK/K
brHASEvfV25dN61TZjZr7N3x/i/zOqvMCjPkINiOi6adj+uyuLPNeB3Gj9s4
fvz0qcJsdlE322NdVPNaqWLdHOu26Vz7/OnTT54+V6ax5lh/bivbmFIRu4um
7tbHkfmv8B9azOf0sbq1W3yaH+vzqrVNZdvxGfGilGtNlb81ZV2Bv611al0c
a6V1M89s7tpt6T/Wuq2z5GVR5bZqwwcOfDd27uL77Wrwtm2KLA7O6tUKz8Zv
iwpS76ex79pxWbh2DCKzusSwcf3rx0qZrl3WzbEaYxA9hC8OXkz0V0Vptwf8
mQj54AUkmWOrkm/qZmGq4hveQoy4XENqbd3oz+quyvlTGWdXpiiP9Uwo/K72
4+Zx2ASUeGTXQE7Ltl274ydPHhiXcno20Ze85QNWz8xdkevXw+92mP28M01e
mEpfNfWfbNYOOM2JwO8WfshaRkxYZ+5xuXcU/lV1s8Jkd/YYz1x/dvr82bNP
jqFy+Dp+gW8uL84vL96+uL786ubl9TGTx26J6RxcVmQcL5p648IyNJhr8d3z
p88+CaNNs7BtwlHRLrvZBArxhAn45wdvNM19NX0+Pju/uTqZnn5xf/KbpVlb
tyzmUG19Vri1abPlHjZ+6z8ImiTvxv6v36mgUvFT2aqBUv2E5XiN6BXsiUu4
HOeRS7+8ybPdVe2BEv3COKtv1jYrgEuJ3v5jFhk5HPdgt/fDsQPLT2ZlPXuy
Mg7rf9LY0mItGD6l5XyJ9TMgPeuf/+fnTyMFvB6sGu/v8Aj+jPF/ksqDI07x
iknj77PJOp+Tyo/HY21mgCWTAQP3gbY+vJq6Iw2Y1UavbLaESbqVtsFHtEur
G7OG9eb2zpb1miBNQ3xa5XZd1lt+X8915fG49c6kTpxJC7pV8efOOt05mwNX
dVY0Wbe6w8PKdc2dLcrSVJllypmtALRQofVET5eF0y5dsc5rAGhVt+BoDkAF
juiyWBUt85pMhbcrZ8s760Z61rVYBj5p9LzOwITTihjDE/AMTdutR9otuzav
N9WImSjIgYyBIZl1jrG8qwIHUU6g0tg/d0Uji1qZW0s0neejLutFgamYFoMn
CX8DzdJmvS49OTdRipcJ/9mxOPF6ZkhQSwvcK7cac377LVvP+/cT2dZVkeel
VeoRubqmzruMaBEli/myxjIBntk6kKx+fIcCu6uiaSB/lo4KtIhC58zC0maf
WbvWVya7tS2mp+1hKodnV+dHJAioG+AUjK/qqiAHRKSyGsxgdQoEkuWTSRui
bvK8EGZqjDctf/Erp+HYW1LFCNRwO3rAgkp4KOSl09ZkS72WASJNv+EQag49
ABcFhtH+kYBoz3nBwk6rM9M0kMZEn9NrEKZAoJhvRc22axYE9ANBQl2GBVaB
C2hG54hrWA3e0lx6Y8AVxLldtzafaAiLxpEmp6aH1eeWB+kNSYFIYVGY3q/G
sTZj2ICjH77/n8DMD9//RXuZp3IGB41dQxsoKIEWsQS9gIpegEtwObNQeFZl
rLCgVzXWiPV602RpDeyWOGlJeTbLWitAYHY70tAnNqYnxI1o3ZjdAxSEzQqL
cEVrPT3b3BWZGO4WMrArDadiXcFmgy1XJ44+/hGmVzWwTHTGjsTC6zXMqw1y
wDK8WtL+KHq0NxgSa5WVXW69EtMWzwQJsRkAnIVtIBOIULCqNM4Bm2gNiaxV
2AvoDzCsAwSxIhiCkopgD6NMSUrGljWwByx5IUsqVqBzZ3N1eFeYoDs0hqau
Gc6iBvrH5ta0XcNSBL94pO4aslrwfGey7dFIq10gIIRtsZEs7kabtoV8JwIl
CZ4mIJ/IjxZAqrvgNwSczDPewZK2eoadNFsWgh24EFD7EVchAq+L0kOqsvM5
uyzit6w32K2Z6H4Jflk7gdIknEUD5eFJIMZ6k0KykBap39W3Noc8VsADwIUj
pP0RqBbfIJ4P8wP6s9tSlkd2OnRUADRshOOl1ISgzmHygPY7Ts26rClmxBuw
AONzLL0hJEBaw544bPS4JCkOhDZv6pVWZqBGAM6sLCCEJ2RX2NaszmEPpGvw
UwCqRgQMsquaTPC+lyegTqZ50vtsQWloN4ujJ2HhWWE3TQ3b9grnx7kOaGyc
+vLqIlh7BjWlZ98VvVCS9eIdUKJe4Z1byl7DpsviG/pyact1XJMt2BKKKrrr
dgkAWGBCqEaFfGBhx0Hc+gSwWzciCGfXBmEBIKKbhYcpXGDJQJFLViNGJFgN
fWuaLW3MBikGgjvI1ckatil84WFYBNyzuIUYzuiBBEdK1EtvbFn6YCYX2VCy
SknMN/gAeDEvFjDiaPjYPqxIIgVS17nJAI8n1RY6kOAICWffSvqHHOGRFwwH
C/g6jUPAIDibYUvJGACNvL34aKC7Y9kkgwf2RZgTilFOI+jJ7p/RatnbO8EZ
JO6aMnenD16/uZkejOSvvrjk19cv//3N+fXLM3p988XJq1fxRRhx88Xlm1f4
XvlX/ZOnl69fv7w4k4fxqd756PXJ1wdi1weXV1MkfyevDoIsVJQFQQYkMPPi
gx9tabdctFyW34vTK/3sYwRrPr98/x6v/wlvfvvsXz5+/15tltbHl3UFtJG3
7O+wc9aIWpbkF9ZFa0rCG+wQMAxAhkCOZfkCaEdFkCpX6isbomBYf6h5eI2j
Rw2UIoA2872ySI2breiFs/aWnbD31zkl5y1ZhwruWnStJx2I9bGOY6DiUKFr
1oRzgA1LEXllKG4bAZ46SkHojfLRACIDcRgxDogzADLhshJDgg+eWVtxRAAp
H3rQl0UegVXelSRU0IceEcheAPsr6CGtGfMCNLAi2k+EhIU7AnKf6DuDQK/d
Et9qx0mIRym3gqyCQjti7gUoIOclJy6P42YOJ46VeoaY7+JGv6CxJIvniC2v
+rcfTfQVJ7/hAzXd57e8iXuLNMlOAPLhOgwHsIegvCdwPlLsv2qOOn3qEuMo
n+4NCBIxbJ41K4oYr87Zg1Ak3+DjEcVIHfR1iw2toUqm/RAFPYaIW9L4iB94
FA5YQAlwgIiIubcBroqQo/Hzh9hBwkx8ygLnmKT//ijKXEUCgwEcxxPzhhZR
kkSVcZJvDGJl72NjbAUVYofvozgyW37E5wrIMuccpyfRPTgRH1TPyDP40JMc
cYuAeuRjEmHi8CCNKw+OmE/odAlEqFjpVK/xjB6HVMlcSHzCKfqerY65tign
RRNi30pqHfRl1FWlTghJMAMEsYB8XCvOIGQ6O9EwfbMnfBtjDrfoCkp91G4C
MpDWbhwCgiWgYOzjsEQgLM0vEO+BeVI/BalghH0HYy68mrQhFKMswKxIsISm
TBlJD2JirLYTbGJ9oDFqb+AJN9SV2GlhdJTsw0S/5sgMSQ6wOIRKIKxmBOUF
RTiaVg7T3E86I9KaS+C0T5qzMigp4H16eXZ5jAABwchn05ecQLyDbdxkjVnB
1m+6AuZ2BiD1NREItqk5xeUMgcWBLPGO0wkCetZ9Rb65a41PN8rakDDPQ1Vg
wSURcV2uLu8EAgrH2wwTYl2DhXBOhXQTAZxpCOJdzXlqITlzZa2Eq2ke67o1
+X8iGUJLMiJ6z5nE5gH5O9bGr5ZFKa6WNJJdTv3hEoaU2zNeDEMJoXbF8ROY
IDMT6GC1nIJZX2eGLdEiJWhFMFZQDuQsZyj2HUE9BIcwkbNbyemn3rnqO4td
B5+KFk+ZtWmyJVIsgEROnoECaJ+lcTA8thWkkxENByjcEJ4f+tBYU2h8FPWY
a+wMjQUneVTgwZQlJE85kbgiAHLML2EDkgFz2gjJU0BGCba1Kh66aH8Qgzga
Ds+4wY7FMFEUItonnYFAuXKftpk+zwmMEbj4+NenevAvPtfeV+B1B1R3POKK
yKxuJINRAoneK618leKRPoFMYRYZpbX68o6msRuJGq+m+kaymyhO2EHtOI1a
d7NSWHzn4x2KNtatGwYvlDuBziknS1C+QFg+6I1VYuegeTM7Z5tAgFL4sNrP
F8ODUFECLeW59BmD89AaSIsCe5JrKih4Vxz1nItiNFEFlaSQs+XoiiphO4LI
IbusLWOW4udi7PWOzo88Wa+lMMplr/7DANErpO/+JaUASZpjxQkR5GTyuJ+s
dykkGQVOLBCJPSylMQR5HLMIqWFRNTrbYA83l6f/dkOaNX1zfUGoR6BLXpaN
AB6yXgdYKxbLdmPpv0lFDoZiMlJ0SvCSuSDbpFIXIybFKsLgL0a7KZxl9K+B
lIEpqSdRfEqxm8/wJQsm83r5h+nl9dXl9XRCEGYrDxhUPozZ6eiBpPTwoD8A
offnIU07OJKyVGsXnKxeTbmkzDJI/SvpEDj3eX+sqZHXbAc6rV4VM46IC9eT
zXvVYeL0iB9PSpFos1eV/UTUfSq9avEu7lJNNK/fJRtzeOVqqvaNy+LWklwg
P8mbKU0aaNAM3sFKZLbSi1qMSIh4zkthGSGnuGsO7R2gLTHGRIclXLtv2hPl
D40ej5N/j/W+f4MhO/8eezLfpSLBA/pmuGRNxPvtO/SSP+qneKx/IY7AjNr7
1F/x7zu9j9TVDkwehrYDmz+Z3t+EI/3pp//6AKm/jaufIKoPCetxQuq7VIlp
A+/tYNhCP264hY97VfhbmfJkdqX1GVWQrEYGSszs96i7s6QA5p1RODTkwCEW
z0LV7QP4w0FXf2QN7Dzt8Y0QhHKVib6UtMoTQICNgOIeeO1x9UhwTBk8fZ3S
SPBR6i6pP/dmrrzn9U6M05s20Il7JtiFt8kyfJ4WSnSSbimuf+dIEIr5HD6r
agNnSKWAXklgzJ/7iJhFNz29Yi7fnF3F5OzvDDbQ1lcsvitmUognYNMv9yjo
6s8Em31cPR7/fLD5LmErOJ/v4pc/h9Jejv4qSh9m+D6le+iXQN6TKy6GD6Dv
U0K/vwdPv5yj2AW/hxQqQF9iP0f654Lfh/Xp50npuz14/HMdzV5e1ICGx16u
9p0+lM2ckIQEs8Y+xEYO2q05CueAd1W889V/yC6p4Y88RO+gK8eDdC6bh5pH
EvSCjqTBg4DTn49z8MuF55kt6w1X3QiIx5S7mKPjfxAeJevzD/gpfjk4+sWs
7Bcn9LfJ+oOhygOx5o5h6D5S+WVCzf1G8tFEvy7eAQJJhUnbhxpq3xmqUSj1
0rAN3NX9mb4hrvnMCB7ZHwCYEAZcXnPAwn5cKQzsG9Ocfn3ydXDKfGDi7WVe
l1D/6Kb1qkbefUyzPJs8lRyEU9SPR/c/+81Ic6U2EsOI55NngYaEUoZjA7j8
0eAD+H5++mb65mJsONLBRxPlKxTan2+tG4voIhDmVEXY4KLJoEkMHzzadzan
L8yKDxr2fUetck5kRljQSQXT95wUkJvEU1TR2EbR82mNCYOJxISkLbTC5tyZ
ssj16ZCWJGQri+mlWLP72KKofOKnS9tSCyRkxB0LLkP0NooZakM9oxWn+UtD
nW+8x37uk5vT83NPALNW3WpGXw9IuYm+qDGmWmA2aS0rpKhGQerOeriAyuGj
g6yd78Zp7KIrTUMhKhUISEX/+J9m/M3J+D/e/vG/wsun40/o3a8nvEFJU94g
/acvH+nPa3gBLrJG6PctH1IKW+D7eBK3O4TL9dSWtSywX/e1e225vAloHyca
0NcDISHeWar5SlgMvSlW3UqbVd1JWdCfMaZtXCpS6M+WGpvUv6nhDAFuOikS
gZ88Gy0pz0lTgvlyockfeytu8wtn6aF2LCumTeXKFJf/pIdEajJ8Slialvgb
cObieRmCfuwrwrhiUIqL1SA5kIzn6pP+8IJLcZI0qABRCTFaiK/iJWTjIU9a
oqNScGNNvtW3FR0fsKiJCB2o1UOyyXN76cZp1WA1A/qB/HZHJhSeYDr6Q0eK
C27Ub2GNVFUZaV8BxNs22Cgd/3brnBNHbHXhuCmQzpztegllaaDHjmp2E/Xr
dCZpCZSTSz5wiE9nvGmVXdRt4c8CuOAGvYX19+scNGillSHHeuqQp9Ww1VmZ
GNADPPyE+RsrjZu7M6cZIjetJnwkrRh+/hEftaTZN/e/9lIgctHMPsQTk6zo
WIS28CRpaqIGA6p67jZ6JOlWnCGuAeKiFmG3xE7f8aap9JygZzcttvNWJGkx
4HllBYk9tAdLD2dXpX3HJxXAdhgl1iUKOMA4gA43e0YT7tdT5EVN5fVMSrR4
gMrtVTvyx/LcAUhdkXSMQW9m/vAdDwODCn/cGnQpmk1VV3Hk+SW1D7ktxL5y
cjYc9Ggi2H3iW7B7THe+B8zH46ErUy+LxTIcPjvb5TWjmbSYrEWGPqBImnik
DiLHkL1wudrg2+ziVsCHVXLMcT7YUfEs/cNBlNTTJsIMKksYCAdOg+ZdlUkF
HlskRwl+MKkPM0niF9qDHaKmO0CwyI8GYpcdO4kEpaVYK81hjx6lDjKFoB++
/2/dmlsuA+H1QO/6vika5VvVaBV+sFfuz7A1dbMNY0w8DPFfDIGIhhHcBYEE
f0fnEPfq+sPmLWnsc0yPEi1uATJcsqpn3JSwyxRWH9jC3wFb/qui92EqFUqY
ZPcxXqbXIbwcyJFga26KkvqVh+lhxJy4aiUuY8yNyUN46B2eWtHZSVI4DI9z
scvcrxTuUuoX8YGNTZopGZlI06b4IpWGfiMHMYM1h+Z9x04uiVHoBCNBJzl+
4UPl4hvfU5fSmWjR0Ed6qFHQ0/sqJsrqxZ/k5Ej3yQJcoqrApKiqcSDTqEMD
l2Q0UUoP0WvsfRG1Pfs33O3dbxP3/XHVIYl5TLPw1xOqPByk+WWkcQMcwLoG
OrHUryKwGj1cAplQqmth/ynTaIg/dkUU7kZd/YAKbKSJW3ZuEnZjqPjYjfuW
0O9GiN4I4jkXGYRGAdlK9q4+Dgeecpohe5w6uvsb+IoftA1NKmE6HUjLnIHf
MAacpsMTQr6PCfY70AkHDbiwm50Pw86bO8hZ+pnhnKwc3/bs32/p66Piq6ny
q5MOeyw9On6KbKdJ5Dw8zSQsMXm9bvtcPHpMikzqahzf03huH+HzeeFpk8pz
pCWy4IereC+i9+4h8Qm8TNRHk+f8v0TtyBwHOth7g4p5QBxYUNbmS/+2uiua
uiKd/+H7vwD/+JKglvNI9q8Q+5Bi4SJzofuKomjWh01DzT181hwPFveFSd6a
41e9XDld4rXGxpdk/5J2/mEnB0G08jbUs8ugpU9ysyaIG8YjGTEoZkHNkXXn
ktgAHstHwqwhe0oHSWxyyEhPwiURnF+dxuY2wzPn0kcUaFPgkNGFOUmJ6Tnq
DaW6qTAqh1I7B98h808QrGBa0jFJgiejDc2E1PvVRyJePQf+zoUu8Z2iqmdd
Dqu+8l2AW3+dYF/45Jt7V51r9x5u7zkWS1q6P+PM6h0HxHOKhEPfTiXXzShW
JoeUd0kTwFzLPYnQ0pTwkt87uUoVhZrYGoiVcf1+EcDHicOG8j1iE7Y5/+Ri
nQQbScca5YYSHj5woVXuuiUXYd+/D/UhYtBplW70bolhZxP9pn9e9+nBTiCo
HtqAkAhxPwFDojRzRYmKkvri3ymCa8hItkjF+C4txUiHv+fIPza8BlIwFu2o
wQVSvFjGOJFbY56Yb4uZc3LtKWYpI5qrhL4DJ/1chW6J9HpLf0Lq4wDuuaFz
BA7zfA+PS85G7y9BBWsUYe15huqVg2dYZdoO+GqpfMGeg6093I9TlOomNxQI
IviAou5LGMQJTb1vAqqW0FEGQSchG/OZJMfiyKaX12+vpm9fn1ycfP7y7O30
+uTihnp53n758jp1BoyJITwZr9tIkSycM1VqyJ+XZhH9gO9Z36kDCI9bqmjC
3ZOh+DoWnvBEYbVKgg3SgIww/H+x0hGW+MP3/xfPpL06cxMiUrzc9VUPMH9z
fnmhA3MUGrZ53fGdUFU39FTCi9hZWBL5hMiSX0Qy3UgPeFNgLkwXGLwp6Jvd
xRP8/LTVc3NaukKprfAqdb6tzCq0kSfn6qEeTwgdL+hybte1EjFwe6jq1ovG
cFTBbWledXaKHb7bW7w66WYMp6QBjW+I0kavuRgzsCc8G7wLpXq+I9MXK/10
9l1Wdk7uyzLgF9KgPjPZrXTwqaHp8tb6Je7A80RpgqRTQv5xBLxXRcUXCs6B
xJs6Se79FQemjfXQJcNs+Ggpj/I+8I2prmh57cFClfckwclKFx3DNFcAhrKs
5w9gNGFMnNRfjKr6wDDlMsZ47Gi8lxmRXp9UeVP7nmQA/s7c6oHJnbi90PT6
e+xvCDzoVii8NX8UuZsVHIiKiZEdqZ0eaB8n8lO7629CF/rQ6fhC0ZvYbPNg
r8x57CMcNBgmHlsufvremA8FGNwzTHnYzN+aVXI3VfpeEbl21U6QOrw0hyCG
YtuZQEkMrUI7kHF69wrAxN/YliK4XDqdye0FigSToKjtk/e/+FbQ30B6inpB
pdUS0uS2n2VNPfH9/YC4JEpw4nLqRg5wpLzrHfvN9Oz8QhwWXl6+mfIGPthU
SKHApvbLdgPXy/3zSVhJd7YjIxz4rOEyWp7Zp3Ok38BL+Z0BL8q4NYDOeHkh
ZH+MhA/tJYvJWaptFln4wQO7LjkIl3Umy2T7inmb11cV6nljQsdwuMfdS+G4
xN89KFwAdLmCEFzc4PdMvv128EsqFMO1vvN+1yjgZy5vdu81qOg7bWZot6Zi
PHt1enB9vjXlbQg30kgRboqEvB8HUhW6vOkLXn3gMAB2kOczqlVXtgVFuSpe
Hx0oxqDzd5fruFbOD3xiEfnk62jknnx18V6/3Q6EAP7ALRf5eT83oQjeh7Fa
7YBf0qwbJ92DTCBdV9sVOR8kkBQLSunF+S5nOWVMboD3IbnZlyGO5OJ7X6en
MkwlxmHlyJmhI9whprvd/vTb5z7mjoC+tEYO9BAu1Hy2EX8UYfcXI9RLcRSu
J0ZHNNyznA3WRF6RT0IvsP3hoqJ/ou/5lq52ZFS3kzDUM0N3/PpB8O6Wf8rB
0vUVf4WYHnlZua6JPyxw4IPPq+vLP3x98CunD7g4lpVU2T/oTyN2kntf8aIz
HXUSC9EUDWW24SgivSKT/G5JOJ1KRDTscZeqF9ar7jW5z6zvoZ+LsE3Jp1Rx
h6huGM6maGNlswebG4pqXDxOWEiJisz6644U21B3EMVFXLrIqGpb2nzBd0XU
t8dymm/zTyG80tmD90q9ph6Mta3JRPnaYjHrfNXh4WzktfkT+wE/XCI5yoT4
lwIAdOqsmQx/RUgf7vmxraORviiyW9DDXBtHv5ACEDuSVoUXWNxNtkSE136j
D39fLJzZHE20+tKUHVvLHCKktXJx04e/fSZBwVZubbxzua8Oc54e4KvX1nJB
OC2X8B1fqIg3q2ac2zuKQEs5gHGtiynGPTlRjGEo1UAY7c854c/28TFoRtGH
X/rk4tkRubn+hjX/kpMs8WuzYThRJ9XCliK2Cf/UTOHPUkLFz3OGcI/wjETF
+lfw0F5eWKP7WPp41P6YdH8+XoHySEj29/0SBlP+oJ//D7MfnbZnTwAA

-->

</rfc>

